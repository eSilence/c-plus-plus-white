#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Image {
  double quality;
  double freshness;
  double rating;
};

struct Params {
  double a;
  double b;
  double c;
};

class Function_part{
public:
	Function_part(char new_opration, double new_value){
		operation = new_opration;
		value = new_value;
	}
	double Apply(double new_value) const {
		if (operation == '+')
			return value + new_value;
		else if (operation == '-')
			return new_value - value;
		else if (operation == '*')
			return new_value * value;
		return new_value / value;
	}
	void Invert(){
		if (operation == '+')
			operation = '-';
		else if (operation == '-')
			operation = '+';
		else if (operation == '*')
			operation = '/';
		else
			operation = '*';
	}
private:
	char operation;
	double value;
};

class Function{
public:
	void AddPart(char new_opration, double new_value){
		part.push_back( Function_part(new_opration, new_value));
	}
	double Apply(double value) const {
		for (const Function_part &p: part)
			value = p.Apply(value);
		return value;
	}
	void Invert(){
		for (Function_part &p: part)
			p.Invert();
		reverse(part.begin(), part.end());
	}
private:
	vector<Function_part> part;

};

Function MakeWeightFunction(const Params& params,
                            const Image& image) {
  Function function;
  function.AddPart('*', params.a);
  function.AddPart('-', image.freshness * params.b);
  function.AddPart('+', image.rating * params.c);
  return function;
}

double ComputeImageWeight(const Params& params, const Image& image) {
  Function function = MakeWeightFunction(params, image);
  return function.Apply(image.quality);
}

double ComputeQualityByWeight(const Params& params,
                              const Image& image,
                              double weight) {
  Function function = MakeWeightFunction(params, image);
  function.Invert();
  return function.Apply(weight);
}

int main() {
  Image image = {10, 2, 6};
  Params params = {4, 2, 6};
  cout << ComputeImageWeight(params, image) << endl;
  cout << ComputeQualityByWeight(params, image, 52) << endl;
  return 0;
}