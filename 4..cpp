#include<iostream>
#include<fstream>
#include<string>
#include<vector>
using namespace std;

/*У каждого из нас есть повторяющиеся ежемесячные дела, каждое из которых нужно выполнять в конкретный день каждого месяца: оплата счетов за электричество, абонентская плата за связь и пр. Вам нужно реализовать работу со списком таких дел на месяц, а именно, реализовать набор следующих операций:

ADD i s
Назначить дело с названием s на день i текущего месяца.

DUMP i
Вывести все дела, запланированные на день i текущего месяца.

NEXT
Перейти к списку дел на новый месяц. При выполнении данной команды вместо текущего (старого) списка дел на текущий месяц создаётся и становится активным (новый) список дел на следующий месяц: все дела со старого списка дел копируются в новый список. После выполнения данной команды новый список дел и следующий месяц становятся текущими, а работа со старым списком дел прекращается.  При переходе к новому месяцу необходимо обратить внимание на разное количество дней в месяцах:

если следующий месяц имеет больше дней, чем текущий, «дополнительные» дни необходимо оставить пустыми (не содержащими дел);

если следующий месяц имеет меньше дней, чем текущий, дела со всех «лишних» дней необходимо переместить на последний день следующего месяца.

Замечания
Историю списков дел хранить не требуется, работа ведется только с текущим списком дел текущего месяца. Более того, при создании списка дел на следующий месяц, он «перетирает» предыдущий список.

Обратите внимание, что количество команд NEXT в общей последовательности команд при работе со списком дел может превышать 11.

Начальным текущим месяцем считается январь.

Количества дней в месяцах соответствуют Григорианскому календарю с той лишь разницей, что в феврале всегда 28 дней.

Формат ввода
Сначала число операций Q, затем описания операций.

Названия дел s уникальны и состоят только из латинских букв, цифр и символов подчёркивания. Номера дней i являются целыми числами и нумеруются от 1 до размера текущего месяца.

Формат вывода
Для каждой операции типа DUMP в отдельной строке выведите количество дел в соответствующий день, а затем их названия, разделяя их пробелом. Порядок вывода дел в рамках каждой операции значения не имеет.

Пример
12
ADD 5 Salary
ADD 31 Walk
ADD 30 WalkPreparations
NEXT
DUMP 5
DUMP 28
NEXT
DUMP 31
DUMP 30
DUMP 28
ADD 28 Payment
DUMP 28

output:
1 Salary
2 WalkPreparations Walk
0
0
2 WalkPreparations Walk
3 WalkPreparations Walk Payment

*/

void ADD(vector<vector<string>> &a, int i, string s){ //Назначить дело с названием s на день i текущего месяца.
	a[i].push_back(s);
}

void DUMP (const vector<vector<string>> &a, int i){ //Вывести все дела, запланированные на день i текущего месяца.
	cout << a[i].size()<<" ";
	for (string s: a[i])
		cout << s <<" ";
	cout<<endl;
}

void DUMP_ALL (const vector<vector<string>> &a){ //Вывести все дела текущего месяца.
	cout<<"\ndays = "<< a.size()<<endl;
	for (int i = 0; i < a.size(); i++){
		if (a[i].size() > 0){
			cout << i<<": "<<a[i].size()<<" ";
			for (string s: a[i])
				cout << s <<" ";
			cout<<endl;
		}
	}
}

void NEXT(vector<vector<string>> &a, int mes){ //Перейти к списку дел на новый месяц. 
	int days[] = {31, 28,31,30,31,30,31,31,30,31,30,31};
	if (a.size() > days[mes]){
		for (int i = days[mes] ; i < a.size(); i++)
			for (string s: a[i])
				a[days[mes]-1].push_back(s);
	}
		a.resize(days[mes]);
}

int main(){
	ifstream f("com_3.txt", ios::in);
	vector<vector<string>> a(31);
	int n; cin>>n; 
	//f >> n;
	int mes = 0;
	for (int i = 0; i < n; i++){
		string s;
		cin>>s; 
		//f >> s;
		if (s == "NEXT"){ 
			mes = (mes + 1)%12;
			NEXT(a, mes);
		}
		else{
			int t; cin>> t;
			//f >> t;
			if (s=="DUMP") DUMP(a, t-1);
			else if (s=="ADD") {
				string p; cin>> p;
				//f >> p;
				ADD(a, t-1, p);
			}
		}
		//cout<<"  "<<i<<"  "; DUMP_ALL(a);
	}

	return 1;
}